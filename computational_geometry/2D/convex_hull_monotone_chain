#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

struct point {
	double x, y;

	bool operator <(const point &p) const {
		return x < p.x || (x == p.x && y < p.y);
	}
};

double cross(point a, point b, point c){
	return (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);
}


vector<point> monotone(vector <point> v){
	int n = v.size(), k = 0;
	vector<point> nodes(2*n);
	sort(v.begin(), v.end());

	for (int i = 0; i < n; i++) {
		while (k > 1 && cross(nodes[k-2], nodes[k-1], v[i]) <= 0) k--;
		nodes[k++] = v[i];
	}

	for (int i = n-2, t = k+1; i >= 0; i--) {
		while (k >= t && cross(nodes[k-2], nodes[k-1], v[i]) <= 0) k--;
		nodes[k++] = v[i];
	}

	nodes.resize(k);
	return nodes;
}

int main(){
	vector <point> p;

	for (int i = 0; i < 7; i++){
		double x,y;
		cin >> x >> y;

		p.push_back ({x,y});
	}

	p = convex_hull (p);
	cout << endl;
	for (auto x : p) cout << x.x << " " << x.y << endl;
}
